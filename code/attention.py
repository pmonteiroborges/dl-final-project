import math
from matplotlib import use
import numpy as np
import tensorflow as tf

class Attention(tf.keras.layers.Layer):
    def __init__(self, input_size, output_size, use_mask=False):
        super(Attention, self).__init__()

        self.use_mask = use_mask

        self.layer = tf.keras.layers.Dense(input_size, activation = None, dtype=tf.float32)

        '''
        Calculates the context vector.

        :param curr_decoder_hidden_state: the current hidden state of the decoder with shape (batch_size, units)
        :param encoder_hidden_states: all the hidden states generated by the encoder with shape (batch_size, timesteps, units)

        :return context: the context vector 
        '''
    def score(self, decoder_hidden_state, hidden_state):
        dense = self.layer(hidden_state)
        dense = tf.reshape(dense, (dense.shape[0], -1))
        decoder_state = tf.transpose(decoder_hidden_state) @ dense
        score = tf.reshape(decoder_state, (-1, hidden_state.shape[1], 1))
        return tf.squeeze(score, axis=[2])


    def call(self, curr_decoder_hidden_state, encoder_hidden_states):
        '''
        Calculates the context vector.

        :param curr_decoder_hidden_state: the current hidden state of the decoder with shape (batch_size, units)
        :param encoder_hidden_states: all the hidden states generated by the encoder with shape (batch_size, timesteps, units)

        :return context: the context vector 
        '''
        scores = self.score(curr_decoder_hidden_state, encoder_hidden_states)
        softmaxed = tf.nn.softmax(scores, axis=1)
        scaled = tf.matmul(softmaxed, encoder_hidden_states)

        context = tf.reduce_sum(scaled, axis=1)

        return context




    